apply plugin: 'com.android.application'

android {
	compileSdkVersion 33
	buildToolsVersion '33.0.2'
	ndkVersion "$ndk_version"
	defaultConfig {
		applicationId 'se.voxelmanip.rollertest'
		minSdkVersion 21
		targetSdkVersion 33

		versionName "${versionMajor}.${versionMinor}.${versionPatch}"
		versionCode project.versionCode

		ndk {
			abiFilters "arm64-v8a"
		}
	}

	// load properties
	Properties props = new Properties()
	def propfile = file('../local.properties')
	if (propfile.exists())
		props.load(new FileInputStream(propfile))

	if (props.getProperty('keystore') != null) {
		signingConfigs {
			release {
				storeFile file(props['keystore'])
				storePassword props['keystore.password']
				keyAlias props['key']
				keyPassword props['key.password']
			}
		}

		buildTypes {
			release {
				minifyEnabled true
				signingConfig signingConfigs.release
			}
		}
	}

	compileOptions {
		sourceCompatibility JavaVersion.VERSION_1_8
		targetCompatibility JavaVersion.VERSION_1_8
	}
}

task prepareAssets() {
	def assetsFolder = "build/assets"
	def projRoot = rootDir.parent

	// See issue #4638
	def unsupportedLanguages = new File("${projRoot}/src/unsupported_language_list.txt").text.readLines()

	doFirst {
		logger.lifecycle('Preparing assets at {}', assetsFolder)
	}

	doLast {
		copy {
			from "${projRoot}/doc/lgpl-2.1.txt" into assetsFolder
		}
		copy {
			from "${projRoot}/builtin" into "${assetsFolder}/builtin"
		}
		copy {
			from "${projRoot}/client/shaders" into "${assetsFolder}/client/shaders"
		}
		copy {
			from "../native/deps/armeabi-v7a/Irrlicht/Shaders" into "${assetsFolder}/client/shaders/Irrlicht"
		}
		copy {
			from "${projRoot}/fonts" include "*.ttf" into "${assetsFolder}/fonts"
		}
		copy {
			from "${projRoot}/textures/base" into "${assetsFolder}/textures/base"
		}

		// compile translations
		fileTree("${projRoot}/po").include("**/*.po").grep {
			it.parentFile.name !in unsupportedLanguages
		}.forEach { poFile ->
			def moPath = "${assetsFolder}/locale/${poFile.parentFile.name}/LC_MESSAGES/"
			file(moPath).mkdirs()
			exec {
				commandLine 'msgfmt', '-o', "${moPath}/minetest.mo", poFile
			}
		}
	}

	task zipAssets(dependsOn: prepareAssets, type: Zip) {
		archiveFileName = "Minetest.zip"
		from assetsFolder
		destinationDirectory = file("src/main/assets")
	}
}

preBuild.dependsOn zipAssets
prepareAssets.dependsOn ':native:getDeps'

dependencies {
	implementation project(':native')
	implementation 'androidx.appcompat:appcompat:1.6.1'
}
